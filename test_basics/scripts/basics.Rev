################################################################################
#
# RevBayes Test-Script: Simple Rev commands
#
#
# authors: Sebastian Hoehna
#
################################################################################

seed(12345)


# testing the datatypes
# first we create two Natural variable
a <- 1
print(filename = "output/Test_basic.txt", append = FALSE, "Type of 1:			", type(a) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
b <- 2
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2:			", type(b) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
c <- a + b
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 1+2:			", type(c) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
c <- a - b
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 1-2:			", type(c) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
c <- a * b
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 1*2:			", type(c) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
c <- a / b
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 1/2:			", type(c) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# now we create a Integer
c <- -2
print(filename = "output/Test_basic.txt", append = TRUE, "Type of -2:			", type(c) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
d <- 5
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 5:			", type(d) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
e <- c * d
print(filename = "output/Test_basic.txt", append = TRUE, "Type of -2 * 5:			", type(e) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
e <- c / d
print(filename = "output/Test_basic.txt", append = TRUE, "Type of -2 / 5:			", type(e) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# a real value
f <- -1.2345
print(filename = "output/Test_basic.txt", append = TRUE, "Type of -1.2345:		", type(f) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
g <- abs(f)
print(filename = "output/Test_basic.txt", append = TRUE, "Type of |-1.2345|:		", type(g) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
# a positive real
h <- 2.3
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2.3:			", type(h) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
i <- h + g
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2.3 + 1.2345:		", type(i) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
i <- h - g
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2.3 - 1.2345:		", type(i) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
i <- h * g
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2.3 * 1.2345:		", type(i) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
i <- h / g
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 2.3 / 1.2345:		", type(i) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")


# create a string
s <- "Hello World!"
print(filename = "output/Test_basic.txt", append = TRUE, "Type of Hello World!:		", type(s) )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
clear()


# first we a vector
a <- v(1,2,3,4,5,6,7,8,9,10)
print(filename = "output/Test_basic.txt", append = TRUE, "Type of v(1,2,3,4,5,6,7,8,9,0):		", type(a), "		Value:	", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Size:		", a.size() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
a.sort()
print(filename = "output/Test_basic.txt", append = TRUE, "Sorted:		", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
a.unique()
print(filename = "output/Test_basic.txt", append = TRUE, "Unique:		", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

a <- v(5,1,3,2,5,3,4,2,3,1)
print(filename = "output/Test_basic.txt", append = TRUE, "Type of v(5,1,3,2,5,3,4,2,3,1):		", type(a), "		Value:	", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Size:		", a.size() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
a.sort()
print(filename = "output/Test_basic.txt", append = TRUE, "Sorted:		", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
a.unique()
print(filename = "output/Test_basic.txt", append = TRUE, "Unique:		", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

b <- [1,2,3,4,5,6,7,8,9,10]
print(filename = "output/Test_basic.txt", append = TRUE, "Type of [1,2,3,4,5,6,7,8,9,10]:		", type(b), "		Value:	", b )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
c <- 1:10
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 1:10:				", type(c), "		Value:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Size:		", c.size() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

c <- 10:-10
print(filename = "output/Test_basic.txt", append = TRUE, "Type of 10:-10:				", type(c), "		Value:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Size:		", c.size() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
# simplex
a <- simplex(1,2,3,4)
print(filename = "output/Test_basic.txt", append = TRUE, "Type of simplex(1,2,3,4):			", type(a), "		Value:	", a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# matrix
a <- [ 1:5, 6:10, 11:15, 16:20, 21:25 ]
print(filename = "output/Test_basic.txt", append = TRUE, "Type of [ 1:5, 6:10, 11:15, 16:20, 21:25 ]:	", type(a), "		Value:	")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, a )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# character data
data <- readDiscreteCharacterData("data/primates_cytb.nex")
print(filename = "output/Test_basic.txt", append = TRUE, "Type of primatex.nex:		", type(data), "		Value:	" )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, data )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Size:		", data.size() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Names:		", data.names() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "#chars:		", data.nchar() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "#taxa:		", data.ntaxa() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "cha type:		", data.chartype() )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# Trees
tree ~ dnUniformTopology(taxa = data.taxa())
print(filename = "output/Test_basic.txt", append = TRUE, "Type of tree:		", type(tree), "		Value:	" )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, tree )
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
clear()



# testing the conditional statements (if, if-else, if-else if-else)# first we test all the logical operators
# AND
if ( TRUE && TRUE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE && TRUE -> TRUE")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE && TRUE -> FALSE")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}

# OR
if ( TRUE || FALSE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE || FALSE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE || FALSE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}
if ( TRUE || TRUE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE || TRUE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " TRUE || TRUE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}
if ( FALSE || TRUE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " FALSE || TRUE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " FALSE || TRUE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}
if ( FALSE || FALSE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " FALSE || FALSE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " FALSE || FALSE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}

# NOT
if ( !TRUE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " !TRUE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " !TRUE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}
if ( !FALSE ) {
   print(filename = "output/Test_basic.txt", append = TRUE, " !FALSE -> TRUE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
} else {
   print(filename = "output/Test_basic.txt", append = TRUE, " !FALSE -> FALSE")
   print(filename = "output/Test_basic.txt", append = TRUE, "\n")
}

# ==

# >

# >=

# <

# <=

clear()




# testing the loops
sum_i <- 0
for (i in 1:100) {
   sum_i <- sum_i + i
}
print(filename = "output/Test_basic.txt", append = TRUE, "Sum of 1:100:		", sum_i)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# Fibonacci series
fib[1] <- 1
fib[2] <- 1
for (j in 3:10) {
   fib[j] <- fib[j-1] + fib[j-2]
}

print(filename = "output/Test_basic.txt", append = TRUE, "Fibonacci series of 1:10:	", fib)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# factorial calculations as while loop
fac <- 1
i <- 10
while (i > 1) {
   fac <- fac * i
   i <- i - 1
}
print(filename = "output/Test_basic.txt", append = TRUE, "Factorial 10:		", fac)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")


clear()

# testing math stuff
# Simple mathematical operators
a <- 1 + 1				# Addition
print(filename = "output/Test_basic.txt", append = TRUE, a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

b <- 10 - 5				# Subtraction
print(filename = "output/Test_basic.txt", append = TRUE, b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

c <- 5 * 5				# Multiplication
print(filename = "output/Test_basic.txt", append = TRUE, c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

d <- 10 / 2				# Division
print(filename = "output/Test_basic.txt", append = TRUE, d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

e <- 2^3				# Exponentiation
print(filename = "output/Test_basic.txt", append = TRUE, e)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
clear()

# Math-Functions
a <- exp(1)				# exponential function
print(filename = "output/Test_basic.txt", append = TRUE, a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

b <- ln(1)				# logarithmic function with natural base
print(filename = "output/Test_basic.txt", append = TRUE, b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

c <- sqrt(16)			# square root function
print(filename = "output/Test_basic.txt", append = TRUE, c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

d <- power(2,2)			# power function: power(a,b) = a^b
print(filename = "output/Test_basic.txt", append = TRUE, d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

e <- abs(-3.2)			# absolute value function
print(filename = "output/Test_basic.txt", append = TRUE, e)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
clear()

# testing the distributions
# Beta distribution
a <- dbeta(0.5,1,1,log=FALSE)
b <- dbeta(0.5,1,1)
#c <- qbeta(0.5,1,1)
#d <- pbeta(0.75,1,1)
e ~ dnBeta(1,1) 
f <- rbeta(1,1,1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Beta distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
#print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
#print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
# Dirichlet distribution
p <- v(1,1,1,1)
x <- simplex(1,1,1,1)
a <- ddirichlet(x,p,log=FALSE)
b <- ddirichlet(x,p)
d ~ dnDirichlet(p) 
e <- rdirichlet(1,p)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Dirichlet distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# Exponential distribution
a <- dexp(1,1,log=FALSE)
b <- dexp(1,1)
c <- qexp(0.5,1)
d <- pexp(0.5,1)
e ~ dnExp(1) 
f <- rexp(1,1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Exponential distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# Gamma distribution
a <- dgamma(1,1,1,log=FALSE)
b <- dgamma(1,1,1)
c <- qgamma(0.5,1,1)
d <- pgamma(10.0,1,1)
e ~ dnGamma(1,1) 
f <- rgamma(1,1,1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Gamma distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# lognormal distribution
a <- dlnorm(1,5,1,log=FALSE)
b <- dlnorm(1,5,1)
c <- qlnorm(0.5,5,1)
d <- plnorm(1.0,5,1)
e ~ dnLnorm(5,1) 
f <- rlnorm(1,5,1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Lognormal distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# standard normal distribution
a <- dnorm(1,log=FALSE)
b <- dnorm(1)
c <- qnorm(0.5)
d <- pnorm(0.5)
e ~ dnNorm(1) 
f <- rnorm(1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Standard normal distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# normal distribution
a <- dnorm(1,0,10,log=FALSE)
b <- dnorm(1,0,10)
c <- qnorm(0.75,5,10)
d <- pnorm(1.0,5,10)
e ~ dnNorm(10,10) 
f <- rnorm(1,10,10)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Normal distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# Uniform distribution
a <- dunif(0,-1,1,log=FALSE)
b <- dunif(0,-1,1)
c <- qunif(0.25,-1,1)
d <- punif(0.75,-1,1)
e ~ dnUnif(-1,1) 
f <- runif(1,-1,1)[1]
print(filename = "output/Test_basic.txt", append = TRUE, "Uniform distribution")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "PDF:		", a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "log-PDF:	", b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "Quantile:	", c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "CDF:		", d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

clear()

# testing the dag assignment structure
# Variable assignment: constant and deterministic
a <- 1				# assignment of constant node 'a'
print(filename = "output/Test_basic.txt", append = TRUE, a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

b := exp(a)				# assignment of deterministic node 'b' with the exponential function with parameter 'a'
print(filename = "output/Test_basic.txt", append = TRUE, b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

c := ln(b)				# assignment of deterministic node 'c' with logarithmic function with parameter 'b'
print(filename = "output/Test_basic.txt", append = TRUE, c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

d <- ln(b)				# assignment of constant node 'd' with the value if the logarithmic function with parameter 'b'
print(filename = "output/Test_basic.txt", append = TRUE, d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

e := c == d			
print(filename = "output/Test_basic.txt", append = TRUE, e)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

a <- 2  				# reassignment of variable a; every deterministic node which has 'a' as a parameter changes its value
print(filename = "output/Test_basic.txt", append = TRUE, a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
print(filename = "output/Test_basic.txt", append = TRUE, e)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")


# Variable assignment: stochastic
lambda <- 1				# assign constant node 'lambda' with value '1'
x ~ dnExp(lambda)		# create stochastic node with exponential distribution and parameter 'lambda'
x.setValue(1.0)
print(filename = "output/Test_basic.txt", append = TRUE, x)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

#x.probability			# print the probability if 'x'

mu <- 0
sigma <- 1
y ~ dnNorm(mu,sigma)	
y.clamp(0.0)
print(filename = "output/Test_basic.txt", append = TRUE, y)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")
clear()



# Testing function definitions

# simple square function
function RealPos square (Real x) { x * x }

a <- square(5.0)
print(filename = "output/Test_basic.txt", append = TRUE, a)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# function for computing the factorial
function Natural fac(Natural i) {
   if (i > 1) {
      return i * fac(i-1)
   } else {
      return 1
   }
}
b <- fac(6)
print(filename = "output/Test_basic.txt", append = TRUE, b)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# function for computing the sum
function Integer sumI(Integer j) {
   if (j > 1) {
      return j + sumI(j-1)
   } else {
      return 1
   }
}
c <- sumI(100)
print(filename = "output/Test_basic.txt", append = TRUE, c)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

# function for computing the fibonacci series
function Integer fib(Integer k) {
   if (k > 1) {
      return fib(k-1) + fib(k-2)
   } else {
      return k
   }
}
d <- fib(6)
print(filename = "output/Test_basic.txt", append = TRUE, d)
print(filename = "output/Test_basic.txt", append = TRUE, "\n")

function sampleDirichlet(n, alpha)
{
   for(i in 1:n)
   {
      asdf[i] ~ dnGamma(alpha, 1.0)
   }
   return asdf/sum(asdf)
}

e <- sampleDirichlet(10, 2)
print(filename = "output/Test_basic.txt", append = TRUE, e)
clear()

q()
